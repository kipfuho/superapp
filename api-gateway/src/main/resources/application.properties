# Server & app
server.port=8080
spring.application.name=api-gateway
spring.main.web-application-type=reactive

# Redis connection
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=10000, expireAfterWrite=10s

# ===== Spring Cloud Gateway =====
# Default filters
spring.cloud.gateway.server.webflux.default-filters[0]=RemoveHopByHopHeaders=connection,keep-alive,transfer-encoding,te,trailer,proxy-authorization,proxy-authenticate,upgrade
spring.cloud.gateway.server.webflux.default-filters[1]=DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin RETAIN_UNIQUE
spring.cloud.gateway.server.webflux.default-filters[2]=AddResponseHeader=X-Gateway, ${spring.application.name}


# Global CORS (tighten for prod)
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedOrigins=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedMethods=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowedHeaders=*
spring.cloud.gateway.server.webflux.globalcors.cors-configurations.[/**].allowCredentials=false


# HTTP client timeouts
spring.cloud.gateway.server.webflux.httpclient.connect-timeout=2000
spring.cloud.gateway.server.webflux.httpclient.response-timeout=5s


# ===== Routes =====
# User Service
spring.cloud.gateway.server.webflux.routes[0].id=user-service
spring.cloud.gateway.server.webflux.routes[0].uri=lb://user-service
spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/api/user-service/**
spring.cloud.gateway.server.webflux.routes[0].filters[0]=StripPrefix=2
spring.cloud.gateway.server.webflux.routes[0].filters[1].name=Retry
spring.cloud.gateway.server.webflux.routes[0].filters[1].args.retries=2
spring.cloud.gateway.server.webflux.routes[0].filters[1].args.statuses=BAD_GATEWAY,SERVICE_UNAVAILABLE,GATEWAY_TIMEOUT
spring.cloud.gateway.server.webflux.routes[0].filters[1].args.methods=GET

# Circuit breaker configuration
spring.cloud.gateway.server.webflux.routes[0].filters[2].name=CircuitBreaker
spring.cloud.gateway.server.webflux.routes[0].filters[2].args.name=userServiceBreaker
spring.cloud.gateway.server.webflux.routes[0].filters[2].args.fallbackUri=forward:/fallback/users
resilience4j.circuitbreaker.instances.userServiceBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.userServiceBreaker.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.userServiceBreaker.slidingWindowSize=20
resilience4j.circuitbreaker.instances.userServiceBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.userServiceBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.userServiceBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.userServiceBreaker.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.timelimiter.instances.userServiceBreaker.timeoutDuration=3s
resilience4j.timelimiter.instances.userServiceBreaker.cancelRunningFuture=true
# resilience4j.bulkhead.instances.userServiceBreaker.maxConcurrentCalls=50
# resilience4j.bulkhead.instances.userServiceBreaker.maxWaitDuration=0

# Rate limiting configuration
spring.cloud.gateway.server.webflux.routes[0].filters[3].name=RequestRateLimiter
spring.cloud.gateway.server.webflux.routes[0].filters[3].args.redis-rate-limiter.replenishRate=10
spring.cloud.gateway.server.webflux.routes[0].filters[3].args.redis-rate-limiter.burstCapacity=20
spring.cloud.gateway.server.webflux.routes[0].filters[3].args.redis-rate-limiter.requestedTokens=1
spring.cloud.gateway.server.webflux.routes[0].filters[3].args.key-resolver=#{@ipKeyResolver}


# Order Service
spring.cloud.gateway.server.webflux.routes[1].id=order-service
spring.cloud.gateway.server.webflux.routes[1].uri=lb://order-service
spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/api/orders/**
spring.cloud.gateway.server.webflux.routes[1].filters[0]=StripPrefix=1


# Actuator pass-through (no auth)
spring.cloud.gateway.server.webflux.routes[2].id=actuator-pass
spring.cloud.gateway.server.webflux.routes[2].uri=http://localhost:${server.port}
spring.cloud.gateway.server.webflux.routes[2].predicates[0]=Path=/actuator/health
spring.cloud.gateway.server.webflux.routes[2].predicates[1]=Path=/actuator/info


# ===== Eureka client =====
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


# ===== Actuator / metrics =====
management.endpoints.web.exposure.include=health,info,metrics,prometheus,gateway,circuitbreakers,circuitbreakerevents
management.endpoint.health.probes.enabled=true
management.endpoint.gateway.access=read-only
management.metrics.tags.application=${spring.application.name}

# logging.level.root=INFO
# logging.level.org.springframework.cloud.gateway=DEBUG
# logging.level.org.springframework.cloud.gateway.handler=DEBUG
# logging.level.org.springframework.cloud.gateway.route=DEBUG
# logging.level.org.springframework.cloud.gateway.filter.ratelimit=TRACE
# logging.level.org.springframework.data.redis=DEBUG
# logging.level.reactor.netty=DEBUG
# logging.level.io.github.resilience4j.circuitbreaker=DEBUG
# logging.level.org.springframework.cloud.loadbalancer=DEBUG
